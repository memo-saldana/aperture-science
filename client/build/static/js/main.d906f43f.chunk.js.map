{"version":3,"sources":["config.js","AccountRecovery_Email.js","AccountRecovery_Password.js","Login.js","Signup.js","ThemeSetter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","URI","AccountRecovery_Email","useState","email","setEmail","console","log","Container","fluid","Row","id","className","Col","lg","Card","Body","Form","Group","controlId","type","placeholder","aria-label","aria-describedby","onChange","e","target","value","Text","Button","variant","size","block","onClick","event","handleClick","AccountRecovery_Password","password","setPassword","setConfirmation","Control","to","Login","props","error","setError","_login","a","preventDefault","_loginHandler","respError","history","push","_","checkInputs","axios","post","then","response","localStorage","setItem","data","token","user","_id","catch","message","_handleKeyDown","key","onKeyDown","initialState","name","confirmPassword","reducer","state","field","Signup","useReducer","dispatch","_signupHandler","_signup","ThemeSetter","App","path","component","AccountEmail","AccountPassword","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,CAEfC,IAAK,mB,2MC0EQC,MAtCf,WAAkC,IAAD,EACLC,mBAAS,IADJ,mBACxBC,EADwB,KACjBC,EADiB,KAI/B,OADAC,QAAQC,IAAIH,GAEV,kBAACI,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CACEC,GAAG,gBACHC,UAAU,6CAEV,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,kBAACC,EAAA,EAAD,CAAML,UAAU,QACd,kBAACK,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,wBAAIP,UAAU,aAAd,oBACA,2BACEQ,KAAK,OACLR,UAAU,eACVS,YAAY,QACZC,aAAW,QACXC,mBAAiB,eACjBC,SAAU,SAACC,GAAOpB,EAASoB,EAAEC,OAAOC,UAEtC,kBAACV,EAAA,EAAKW,KAAN,CAAWhB,UAAU,gBAEvB,kBAACiB,EAAA,EAAD,CAAQlB,GAAG,cAAcmB,QAAQ,OAAOC,KAAK,KAAKC,OAAK,EAACC,QAAS,SAAAR,GAAC,OAhDlF,SAAqBS,EAAO9B,GAC1B,IAAMO,EAAKuB,EAAMR,OAAOf,GACxBL,QAAQC,IAAI,WAAaI,GA8C2DwB,CAAYV,KAAlF,mB,iCCqBDW,MA/Cf,WAAqC,IAAD,EACFjC,mBAAS,IADP,mBAC3BkC,EAD2B,KACjBC,EADiB,OAEMnC,mBAAS,IAFf,mBAEboC,GAFa,WAMlC,OAFAjC,QAAQC,IAAI8B,GAGV,kBAAC7B,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CACEC,GAAG,gBACHC,UAAU,6CAEV,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,kBAACC,EAAA,EAAD,CAAML,UAAU,QACd,wBAAIA,UAAU,aAAd,kBACA,kBAACK,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBACpB,kBAACF,EAAA,EAAKuB,QAAN,CACE5B,UAAU,OACVQ,KAAK,WACLC,YAAY,eACZG,SAAU,SAACC,GAAOa,EAAYb,EAAEC,OAAOC,WAG3C,kBAACV,EAAA,EAAKC,MAAN,CAAYC,UAAU,iCACpB,kBAACF,EAAA,EAAKuB,QAAN,CACE5B,UAAU,OACVQ,KAAK,WACLC,YAAY,mBACZG,SAAU,SAACC,GAAOc,EAAgBd,EAAEC,OAAOC,WAG/C,kBAAC,IAAD,CAAMc,GAAG,UACP,kBAACZ,EAAA,EAAD,CAAQC,QAAQ,OAAOC,KAAK,KAAKC,OAAK,GAAtC,kB,iBCtDlB,IAyGeU,EAzGD,SAACC,GAAW,IAAD,EACGxC,mBAAS,IADZ,mBAChBC,EADgB,KACTC,EADS,OAESF,mBAAS,IAFlB,mBAEhBkC,EAFgB,KAENC,EAFM,OAGGnC,mBAAS,IAHZ,mBAGhByC,EAHgB,KAGTC,EAHS,KAKjBC,EAAM,uCAAG,WAAMrB,GAAN,eAAAsB,EAAA,6DACbtB,EAAEuB,iBACFH,EAAS,IAFI,SAGSI,IAHT,QAGTC,EAHS,QAKXL,EAASK,GAETP,EAAMQ,QAAQC,KAAK,KAPR,2CAAH,sDAWNH,EAAgB,SAAAI,GACpB,GAxBJ,SAAqBjD,EAAOiC,GAC1B,MAAc,KAAVjC,GAA6B,KAAbiC,EAuBdiB,CAAYlD,EAAOiC,GACrB,OAAOkB,IACJC,KAAKvD,MAAM,aAAc,CACxBG,QACAiC,aAEDoB,MAAK,SAAAC,GAGJ,OAFAC,aAAaC,QAAQ,QAASF,EAASG,KAAKC,OAC5CH,aAAaC,QAAQ,SAAUF,EAASG,KAAKE,KAAKC,KAC3C,QAERC,OAAM,SAAArB,GACL,OAAIA,EAAMc,SACDd,EAAMc,SAASG,KAAKK,QACftB,EAAMsB,YAKtBC,EAAiB,SAAA1C,GACP,UAAVA,EAAE2C,KACJtB,EAAOrB,IAIX,OACE,kBAACjB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CACEC,GAAG,gBACHC,UAAU,6CAEV,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,kBAACC,EAAA,EAAD,CAAML,UAAU,QACd,wBAAIA,UAAU,aAAd,UACA,uBAAGA,UAAU,SAASgC,GACtB,kBAAC3B,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,2BACEC,KAAK,OACLR,UAAU,eACVS,YAAY,QACZC,aAAW,QACXE,SAAU,SAAAC,GACRpB,EAASoB,EAAEC,OAAOC,QAEpB0C,UAAWF,IAEb,kBAAClD,EAAA,EAAKW,KAAN,CAAWhB,UAAU,gBAEvB,kBAACK,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBACpB,2BACEC,KAAK,WACLR,UAAU,eACVS,YAAY,WACZC,aAAW,WACXE,SAAU,SAAAC,GACRa,EAAYb,EAAEC,OAAOC,QAEvB0C,UAAWF,KAGf,kBAAC,IAAD,CAAM1B,GAAG,mBAAT,0BACA,kBAACZ,EAAA,EAAD,CACElB,GAAG,WACHmB,QAAQ,OACRC,KAAK,KACLC,OAAK,EACLC,QAASa,EACTlC,UAAU,QANZ,WAWF,yBAAKA,UAAU,iCACb,+CACA,kBAAC,IAAD,CAAM6B,GAAG,WACP,+C,gBCrGZ6B,EAAe,CACnBC,KAAM,GACNnE,MAAO,GACPiC,SAAU,GACVmC,gBAAiB,GACjB5B,MAAO,IAGT,SAAS6B,EAAQC,EAAjB,GAA2C,IAAjBC,EAAgB,EAAhBA,MAAOhD,EAAS,EAATA,MAC/B,OAAO,eACF+C,EADL,eAEGC,EAAQhD,IAgBb,IAgHeiD,EAhHA,SAAAjC,GAAU,IAAD,EACIkC,qBAAWJ,EAASH,GADxB,mBACfI,EADe,KACRI,EADQ,KAGhBtD,EAAW,SAAAC,GACfqD,EAAS,CAAEH,MAAOlD,EAAEC,OAAO6C,KAAM5C,MAAOF,EAAEC,OAAOC,SAG9C4C,EAA0CG,EAA1CH,KAAMnE,EAAoCsE,EAApCtE,MAAOiC,EAA6BqC,EAA7BrC,SAAUmC,EAAmBE,EAAnBF,gBAEtBO,EAAiB,SAAA1B,GACrB,GAtBJ,SAAqBqB,GACnB,MACiB,KAAfA,EAAMH,MACU,KAAhBG,EAAMtE,OACa,KAAnBsE,EAAMrC,UACoB,KAA1BqC,EAAMF,gBAiBFlB,CAAYoB,GACd,OAAOnB,IACJC,KAAKvD,MAAM,cAAe,CAAEsE,OAAMnE,QAAOiC,WAAUmC,oBACnDf,MAAK,SAAAC,GACJ,OAAO,QAERO,OAAM,SAAArB,GACL,OAAIA,EAAMc,SACDd,EAAMc,SAASG,KAAKK,QACftB,EAAMsB,YAKtBc,EAAO,uCAAG,WAAMvD,GAAN,eAAAsB,EAAA,6DACdtB,EAAEuB,iBADY,SAEQ+B,IAFR,QAEV7B,EAFU,QAIZ4B,EAAS,CAAEH,MAAO,QAAShD,MAAOuB,IAElCP,EAAMQ,QAAQC,KAAK,UANP,2CAAH,sDAUb,OACE,kBAAC5C,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,CACEC,GAAG,gBACHC,UAAU,6CAEV,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,CAAWJ,UAAU,OACnB,kBAACK,EAAA,EAAD,CAAML,UAAU,QACd,wBAAIA,UAAU,aAAd,WACA,uBAAGA,UAAU,SAAS8D,EAAM9B,OAC5B,kBAAC3B,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,2BACEC,KAAK,OACLR,UAAU,eACVS,YAAY,OACZC,aAAW,OACXE,SAAUA,EACV+C,KAAK,SAEP,kBAACtD,EAAA,EAAKW,KAAN,CAAWhB,UAAU,gBAEvB,kBAACK,EAAA,EAAKC,MAAN,CAAYC,UAAU,oBACpB,2BACEC,KAAK,OACLR,UAAU,eACVS,YAAY,QACZC,aAAW,QACXE,SAAUA,EACV+C,KAAK,UAEP,kBAACtD,EAAA,EAAKW,KAAN,CAAWhB,UAAU,gBAEvB,kBAACK,EAAA,EAAKC,MAAN,CAAYC,UAAU,qBACpB,2BACEC,KAAK,WACLR,UAAU,eACVS,YAAY,WACZC,aAAW,WACXE,SAAUA,EACV+C,KAAK,cAGT,kBAACtD,EAAA,EAAKC,MAAN,CAAYC,UAAU,uBACpB,2BACEC,KAAK,WACLR,UAAU,eACVS,YAAY,mBACZC,aAAW,2BACXE,SAAUA,EACV+C,KAAK,qBAGT,kBAAC1C,EAAA,EAAD,CACElB,GAAG,YACHmB,QAAQ,OACRC,KAAK,KACLC,OAAK,EACLC,QAAS+C,GALX,YAUF,yBAAKpE,UAAU,iCACb,oDACA,kBAAC,IAAD,CAAM6B,GAAG,UACP,8CChEHwC,MAzEf,WACE,OACE,2BAAO7D,KAAK,YAAZ,m9C,QCmBW8D,MAdf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAW1C,IAChC,kBAAC,IAAD,CAAOyC,KAAK,UAAUC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,kBAAkBC,UAAWC,IACzC,kBAAC,IAAD,CAAOF,KAAK,qBAAqBC,UAAWE,OCLhCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdnC,OAAM,SAAArB,GACLtC,QAAQsC,MAAMA,EAAMsB,c","file":"static/js/main.d906f43f.chunk.js","sourcesContent":["module.exports = {\n  // URI: \"https://opening-science.herokuapp.com\"\n  URI: \"localhost:3000\"\n}","import Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport React, { useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport { URI } from \"./config\";\n\nfunction checkInput(email) {\n  if (email !== \"\") {\n    return true\n  }\n  return false\n}\n\nfunction handleClick(event, email) {\n  const id = event.target.id;\n  console.log(\"Pressed \" + id);\n/* PENDIENTE CHECAR EMAIL Y TOKEN\n  if (checkInput(email)) {\n    (async () => {\n      const rawResponse = await fetch(URI + '/api/password', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({email: email})\n      });\n      const content = await rawResponse.json();\n    \n      console.log(content);\n    })();\n  }\n  */\n}\n\nfunction AccountRecovery_Email() {\n  const [email, setEmail] = useState(\"\");\n\n  console.log(email);\n  return (\n    <Container fluid>\n      <Row\n        id=\"App-Container\"\n        className=\"align-items-center justify-content-center\"\n      >\n        <Col lg=\"6\">\n          <Card>\n            <Card.Body>\n              <Form className=\"mb-2\">\n                <Form.Group controlId=\"formBasicEmail\">\n                  <h1 className=\"display-4\">Forgot password?</h1>\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Email\"\n                    aria-label=\"Email\"\n                    aria-describedby=\"basic-addon1\"\n                    onChange={(e) => {setEmail(e.target.value)}}\n                  />\n                  <Form.Text className=\"text-muted\"></Form.Text>\n                </Form.Group>\n                <Button id=\"continueBtn\" variant=\"main\" size=\"lg\" block onClick={e => handleClick(e, email)}>\n                  Continue\n                </Button>\n              </Form>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default AccountRecovery_Email;\n","import Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport React, { useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\nimport { URI } from \"./config\";\n\nfunction checkInputs(password, confirmation) {\n  if (password !== \"\" && confirmation !== \"\" && password === confirmation) {\n    return true\n  }\n  return false\n}\n\nfunction handleClick(event, password, confirmation) {\n  const id = event.target.id;\n  console.log(\"Pressed \" + id);\n\n  if (checkInputs(password, confirmation)) {\n    (async () => {\n      const rawResponse = await fetch(URI + '/api/forgot', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({password: password})\n      });\n      const content = await rawResponse.json();\n    \n      console.log(content);\n    })();\n  }\n}\n\nfunction AccountRecovery_Password() {\n  const [password, setPassword] = useState(\"\");\n  const [confirmation, setConfirmation] = useState(\"\");\n\n  console.log(password);\n\n  return (\n    <Container fluid>\n      <Row\n        id=\"App-Container\"\n        className=\"align-items-center justify-content-center\"\n      >\n        <Col lg=\"6\">\n          <Card>\n            <Card.Body>\n              <Form className=\"mb-2\">\n                <h1 className=\"display-4\">Reset password</h1>\n                <Form.Group controlId=\"formBasicPassword\">\n                  <Form.Control\n                    className=\"mb-2\"\n                    type=\"password\"\n                    placeholder=\"New password\"\n                    onChange={(e) => {setPassword(e.target.value)}}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formBasicPasswordConfirmation\">\n                  <Form.Control\n                    className=\"mb-2\"\n                    type=\"password\"\n                    placeholder=\"Confirm password\"\n                    onChange={(e) => {setConfirmation(e.target.value)}}\n                  />\n                </Form.Group>\n                <Link to=\"/login\">\n                  <Button variant=\"main\" size=\"lg\" block>\n                    Log in\n                  </Button>\n                </Link>\n              </Form>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default AccountRecovery_Password;\n","import Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport React, { useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\nimport { URI } from \"./config\";\nimport axios from \"axios\";\n\nfunction checkInputs(email, password) {\n  if (email !== \"\" && password !== \"\") {\n    return true;\n  }\n  return false;\n}\n\nconst Login = (props) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const _login = async e => {\n    e.preventDefault();\n    setError(\"\");\n    let respError = await _loginHandler();\n    if (respError) {\n      setError(respError);\n    } else {\n      props.history.push(\"/\");\n    }\n  };\n\n  const _loginHandler = _ => {\n    if (checkInputs(email, password)) {\n      return axios\n        .post(URI + '/api/login', {\n          email,\n          password\n        })\n        .then(response => {\n          localStorage.setItem(\"token\", response.data.token);\n          localStorage.setItem(\"userId\", response.data.user._id);\n          return null;\n        })\n        .catch(error => {\n          if (error.response) {\n            return error.response.data.message;\n          } else return error.message;\n        });\n    }\n  };\n\n  const _handleKeyDown = e => {\n    if (e.key === \"Enter\") {\n      _login(e);\n    }\n  };\n\n  return (\n    <Container fluid>\n      <Row\n        id=\"App-Container\"\n        className=\"align-items-center justify-content-center\"\n      >\n        <Col lg=\"7\">\n          <Card>\n            <Card.Body>\n              <Form className=\"mb-2\">\n                <h1 className=\"display-4\">Log in</h1>\n                <p className=\"error\">{error}</p>\n                <Form.Group controlId=\"formBasicEmail\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Email\"\n                    aria-label=\"Email\"\n                    onChange={e => {\n                      setEmail(e.target.value);\n                    }}\n                    onKeyDown={_handleKeyDown}\n                  />\n                  <Form.Text className=\"text-muted\"></Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formBasicPassword\">\n                  <input\n                    type=\"password\"\n                    className=\"form-control\"\n                    placeholder=\"Password\"\n                    aria-label=\"Password\"\n                    onChange={e => {\n                      setPassword(e.target.value);\n                    }}\n                    onKeyDown={_handleKeyDown}\n                  />\n                </Form.Group>\n                <Link to=\"/recovery-email\"> Forgot your password?</Link>\n                <Button\n                  id=\"loginBtn\"\n                  variant=\"main\"\n                  size=\"lg\"\n                  block\n                  onClick={_login}\n                  className=\"mt-3\"\n                >\n                  Log in\n                </Button>\n              </Form>\n              <div className=\"d-flex justify-content-center\">\n                <p>No account? &nbsp;</p>\n                <Link to=\"/signup\">\n                  <b>Sign Up!</b>\n                </Link>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Login;\n","import Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport React, { useReducer } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\nimport { URI } from \"./config\";\nimport axios from \"axios\";\n\nconst initialState = {\n  name: \"\",\n  email: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n  error: \"\"\n};\n\nfunction reducer(state, { field, value }) {\n  return {\n    ...state,\n    [field]: value\n  };\n}\n\nfunction checkInputs(state) {\n  if (\n    state.name !== \"\" &&\n    state.email !== \"\" &&\n    state.password !== \"\" &&\n    state.confirmPassword !== \"\"\n  ) {\n    return true;\n  }\n  return false;\n}\n\nconst Signup = props => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const onChange = e => {\n    dispatch({ field: e.target.name, value: e.target.value });\n  };\n\n  let {name, email, password, confirmPassword} = state;\n\n  const _signupHandler = _ => {\n    if (checkInputs(state)) {\n      return axios\n        .post(URI + \"/api/signup\", { name, email, password, confirmPassword })\n        .then(response => {\n          return null;\n        })\n        .catch(error => {\n          if (error.response) {\n            return error.response.data.message;\n          } else return error.message;\n        });\n    }\n  };\n\n  const _signup = async e => {\n    e.preventDefault();\n    let respError = await _signupHandler();\n    if (respError) {\n      dispatch({ field: \"error\", value: respError });\n    } else {\n      props.history.push(\"/login\");\n    }\n  };\n\n  return (\n    <Container fluid>\n      <Row\n        id=\"App-Container\"\n        className=\"align-items-center justify-content-center\"\n      >\n        <Col lg=\"8\">\n          <Card>\n            <Card.Body className=\"p-4\">\n              <Form className=\"mb-2\">\n                <h1 className=\"display-4\">Sign up</h1>\n                <p className=\"error\">{state.error}</p>\n                <Form.Group controlId=\"formBasicEmail\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Name\"\n                    aria-label=\"Name\"\n                    onChange={onChange}\n                    name=\"name\"\n                  />\n                  <Form.Text className=\"text-muted\"></Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formConfirmEmail\">\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Email\"\n                    aria-label=\"Email\"\n                    onChange={onChange}\n                    name=\"email\"\n                  />\n                  <Form.Text className=\"text-muted\"></Form.Text>\n                </Form.Group>\n                <Form.Group controlId=\"formBasicPassword\">\n                  <input\n                    type=\"password\"\n                    className=\"form-control\"\n                    placeholder=\"Password\"\n                    aria-label=\"Password\"\n                    onChange={onChange}\n                    name=\"password\"\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formConfirmPassword\">\n                  <input\n                    type=\"password\"\n                    className=\"form-control\"\n                    placeholder=\"Confirm Password\"\n                    aria-label=\"Password confirmPassword\"\n                    onChange={onChange}\n                    name=\"confirmPassword\"\n                  />\n                </Form.Group>\n                <Button\n                  id=\"signUpBtn\"\n                  variant=\"main\"\n                  size=\"lg\"\n                  block\n                  onClick={_signup}\n                >\n                  Sign up\n                </Button>\n              </Form>\n              <div className=\"d-flex justify-content-center\">\n                <p>Have an account? &nbsp;</p>\n                <Link to=\"/login\">\n                  <b>Log in!</b>\n                </Link>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Signup;\n","import React from \"react\";\n\nfunction ThemeSetter() {\n  return (\n    <style type=\"text/css\">\n      {`\n        :root {\n            --background-color: #fcfaf9; /*snow*/\n            --progress-color: #5bc0be;   /*sea serpent*/\n            --main-color: #4b5f78;       /*payne's gray*/\n            --hover-main: #45576e;\n            --bold-main: #454c63;        /*independence*/\n            --dark-bg: #333;             /*jet*/\n            --error: #B5072A;\n        }\n\n        .btn-main {\n          background-color: var(--main-color);\n          color: white;\n        }\n\n        .btn-main:hover {\n          color: white;\n          background-color: var(--hover-main);\n        }\n\n        a {\n            color: var(--main-color);\n        }\n\n        a:hover {\n          color: var(--hover-main);\n        }\n\n        .App, #App-Container {\n            min-height: 100vh;\n            background-color: var(--background-color);\n        }\n\n        #search-bar {\n            margin-top: 1%;\n        }\n        \n        #deck-container {\n            padding: 1% 5% 5% 5%;\n        }\n\n        #basic-addon1 {\n            background-color: white;\n        }\n\n        .progress-bar {\n            background-color: var(--progress-color);\n        }\n\n        .card-title {\n            color: var(--bold-main);\n        }\n\n        .card-text {\n            color: var(--main-color);\n        }\n\n        .nav-main {\n            background-color: var(--dark-bg) !important;\n        }\n\n        .error {\n          color: var(--error);\n        }\n      `}\n    </style>\n  );\n}\n\nexport default ThemeSetter;\n","import AccountEmail from './AccountRecovery_Email';\nimport AccountPassword from './AccountRecovery_Password'\nimport Login from './Login';\nimport React from \"react\";\nimport Signup from './Signup';\nimport Themer from './ThemeSetter';\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom'\n\n\nfunction App() {\n  return (\n    <Router>\n      <Themer />\n      <Switch>\n        <Route path=\"/login\" component={Login}/>\n        <Route path=\"/signup\" component={Signup}/>\n        <Route path=\"/recovery-email\" component={AccountEmail} />\n        <Route path=\"/recovery-password\" component={AccountPassword} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}